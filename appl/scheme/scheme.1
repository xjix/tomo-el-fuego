.TH SCHEME 1
.SH NAME
scheme \- Scheme interpreter
.SH SYNOPSIS
.B scheme
.SH DESCRIPTION
This Scheme interpreter implements nearly all of the
essential procedures of the r4rs Scheme standard, save
for call-with-curent-continuation.
It also implements most of the features of r5rs, with
the major exceptions being macros and calls related
to continuation.
Finally, it behaves as r6rs, rather than r[45]rs in being
case-sensitive.
.SH EXTENSIONS
.TP 5
(quit)
This does the obvious of exiting the interpreter.

.TP 5
.RI (popen\  cmd-string )
The
.I cmd-string
is executed by the shell.
The command's standard input and output are assigned
to two Scheme ports which make a list returned by this
function.
One particular use of
.I popen
is in talking to Tk.
For example,

.EX
(define tkports (popen "tkcmd"))
(define tkin (car tkports))
(define tkout (cadr tkports))
(display "label .l -text {Hello World}\n" tkout)
(display "pack .l\n" tkout)
.EE

.RS 0
is a simple graphical version of everyone's favorite
first program.

.TP 5
(<-=)

.TP 5
(=<-)

.TP 5
(alt)

.TP 5
(channel)

.TP 5
(close-inout-port)

.TP 5
(open-inout-file)

.TP 5
(open-input-string)

.TP 5
(readfile)

.TP 5
(readline)

.TP 5
(sleep)

.TP 5
(spawn)

.SH CURRENT STATUS
.TP 5
r4rs
all essential procedures except (call-with-current-continuation)

.TP 5
r5rs
all non-optional features except
(char-ready?)
(call-with-current-continuation)
(values)
(call-with-values)
(dynamic-wind)
(define-syntax)
(let-syntax)
(letrec-syntax)
(syntax-rules)

.SH SOURCE
.B /appl/scheme/cell.b
- core cell, pair, and environment routines.
.br
.B /appl/scheme/sform.b
- functions that implement special forms.
.br
.B /appl/scheme/builtin.b
- functions that implement built-in procedures.
.br
.B /appl/scheme/scheme.b
- top-level REPL functions.
.br
.B extension.b
- Inferno scheme extensions.
.br
.B /lib/scheme/library.scm
- Some procedures implemented in scheme, rather than directly as built-in functions.
.br
.SH BUGS
The (char-ready?) procedure is not likely to ever be implemented; there's not really a good way to do it in Inferno.
No complex numbers.
No compiler.
Error handling should be better.
Proper tail calls only partial with little testing.
